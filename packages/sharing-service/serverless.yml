service: sharing-service
frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-slic-watch-plugin
  - serverless-bundle
  - serverless-api-gateway-throttling

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'local'}
  region: ${opt:region}
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'
  environment:
    SLIC_STAGE: ${self:provider.stage}
    EMAIL_QUEUE_NAME: ${self:custom.emailQueueName}
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221

custom:
  app: ${file(../../app.yml)}
  bundle:
    esbuild: true
    linting: false
  nsDomain: ${self:custom.app.domainConfig.nsDomain}
  serverless-offline:
    httpPort: 4006
    lambdaPort: 4008
    websocketPort: 4007
    stage: local
    region: ${self:provider.region}
  emailQueueName: ${self:provider.stage}-email-queue
  prune:
    automatic: true
    number: 3
  slicWatch: ${self:custom.app.slicWatch}
  apiGatewayThrottling:
    maxRequestsPerSecond: 50
    maxConcurrentRequests: 25

functions: ${file(./sls-functions.yml)}

resources:
  Parameters:
    NsDomainParameter:
      Type: String
      Default: ${self:custom.app.domainConfig.nsDomain}

    UserPoolArnParameter:
      Type: AWS::SSM::Parameter::Value<String>
      Default: /${self:provider.stage}/user-service/user-pool-arn

  Conditions:
    HasDomain: !Not [!Equals [!Ref NsDomainParameter, '']]

  Resources:
    cognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.Authorization
        Name: slic-user-pool-authorizer-sharing-service
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !Ref UserPoolArnParameter

    # The service's generated API Gateway URL is only used when no domain is defined
    sharingServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:provider.stage}/sharing-service/url
        Type: String
        Value:
          Fn::Join:
            - ''
            - ['https://', {'Ref': 'ApiGatewayRestApi'}, '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}']

    # Workaround for "Invalid stage identifier specified"
    # See https://github.com/serverless/serverless/issues/4029
    resApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Condition: HasDomain
      DependsOn: ApiGatewayMethodPost
      Properties:
        StageName: ${self:provider.stage}
        RestApiId:
          Ref: ApiGatewayRestApi

    apiCustomDomainPathMappings:
      Type: AWS::ApiGateway::BasePathMapping
      Condition: HasDomain
      Properties:
        BasePath: 'share'
        RestApiId:
          Ref: ApiGatewayRestApi
        DomainName: api.${self:custom.app.domainConfig.domainPrefixes.${self:provider.stage}}${self:custom.nsDomain}
        Stage: ${self:provider.stage}
      DependsOn: resApiGatewayDeployment

